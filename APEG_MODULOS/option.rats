module option;
import spacing;


/*
option returns[List<apeg.parse.ast.GrammarNode.GrammarOption> list]:
   {$list = new ArrayList<apeg.parse.ast.GrammarNode.GrammarOption>();}
   'options' '{' (r=grammar_opt {$list.add($r.opt);} ';')* '}'
  |
   {$list = new ArrayList<apeg.parse.ast.GrammarNode.GrammarOption>();}
;
*/
public void option = "options" ws? '{' ws? (grammar_opt ';')* ws? '}';


/*
grammar_opt returns[apeg.parse.ast.GrammarNode.GrammarOption opt]:
  'isAdaptable' '=' 
   ('true' {$opt = apeg.parse.ast.GrammarNode.GrammarOption.ADAPTABLE;}
  | 'false' {$opt = apeg.parse.ast.GrammarNode.GrammarOption.NO_ADAPTABLE;}
  )
 |
  'memoize' '='
   ('true' {$opt = apeg.parse.ast.GrammarNode.GrammarOption.MEMOIZE;}
  | 'false' {$opt = apeg.parse.ast.GrammarNode.GrammarOption.NO_MEMOIZE;}
  )
 |
  'envSemantics' '='
   ('simple' {$opt = apeg.parse.ast.GrammarNode.GrammarOption.SIMPLE_ENV_SEMANTICS;}
  | 'discardChangesWhenFail'
         {$opt = apeg.parse.ast.GrammarNode.GrammarOption.USUAL_SEMANTICS;}
  )
;
*/
public void grammar_opt = "isAdaptable" ws? '=' ws? ("true" / "false") / "memoize" ws? '=' ws? ("true" / "false")  / "envSemantics" ws? '=' ws? ("simple" / "discardChangeWhenFail");


/*
NÃO SEI SE PRECISA COLOCAR ESSA PARTE, QUALQUER COISA SÓ APAGAR
*/


/*
header returns[String h]:
    'header' '{' r=h_text {$h = $r.text;} '}'
   |
    {$h = "";}
;

h_text:
  (.*?);
*/
public void header = "header" ws? '{' ws? h_text ws? '}' ws;

public void h_text = _*;



