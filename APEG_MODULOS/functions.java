// ===========================================================================
// This file has been generated by
// Rats! Parser Generator, version 2.4.0,
// (C) 2004-2014 Robert Grimm,
// on Quarta-feira, 15 de Mar√ßo de 2017 at 19:52:25.
// Edit at your own risk.
// ===========================================================================

import java.io.Reader;
import java.io.IOException;

import xtc.util.Pair;

import xtc.parser.ParserBase;
import xtc.parser.Column;
import xtc.parser.Result;
import xtc.parser.SemanticValue;
import xtc.parser.ParseError;

/**
 * Packrat parser for grammar <code>functions</code>.
 *
 * <p />This class has been generated by the <i>Rats!</i> parser
 * generator, version 2.4.0, (C) 2004-2014 Robert Grimm.
 */
public final class functions extends ParserBase {

  // =========================================================================

  /** Memoization table column. */
  static final class functionsColumn extends Column {
    Result fID;
    Result fID$$Star1;
    Result fws;
  }

  // =========================================================================

  /**
   * Create a new packrat parser.
   *
   * @param reader The reader.
   * @param file The file name.
   */
  public functions(final Reader reader, final String file) {
    super(reader, file);
  }

  /**
   * Create a new packrat parser.
   *
   * @param reader The file reader.
   * @param file The file name.
   * @param size The file size.
   */
  public functions(final Reader reader, final String file, final int size) {
    super(reader, file, size);
  }

  // =========================================================================

  protected Column newColumn() {
    return new functionsColumn();
  }

  // =========================================================================

  /**
   * Parse nonterminal functions.functions.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pfunctions(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    boolean    yyRepeated1;
    int        yyOption1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('f' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('u' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('n' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('c' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('t' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('i' == yyC) {
                yyIndex = yyIndex + 1;

                yyC = character(yyIndex);
                if ('o' == yyC) {
                  yyIndex = yyIndex + 1;

                  yyC = character(yyIndex);
                  if ('n' == yyC) {
                    yyIndex = yyIndex + 1;

                    yyC = character(yyIndex);
                    if ('s' == yyC) {
                      yyIndex = yyIndex + 1;

                      yyResult = pws(yyIndex);
                      yyError  = yyResult.select(yyError);
                      if (yyResult.hasValue()) {

                        yyRepetition1 = yyResult.index;
                        while (true) {

                          yyResult = pID(yyRepetition1);
                          yyError  = yyResult.select(yyError, yyRepetition1);
                          if (yyResult.hasValue()) {

                            yyRepetition1 = yyResult.index;
                            continue;
                          }
                          break;
                        }

                        yyResult = pws(yyRepetition1);
                        yyError  = yyResult.select(yyError);
                        if (yyResult.hasValue()) {

                          yyBase = yyResult.index;
                          yyC    = character(yyBase);
                          if ('f' == yyC) {
                            yyIndex = yyResult.index + 1;

                            yyC = character(yyIndex);
                            if ('r' == yyC) {
                              yyIndex = yyIndex + 1;

                              yyC = character(yyIndex);
                              if ('o' == yyC) {
                                yyIndex = yyIndex + 1;

                                yyC = character(yyIndex);
                                if ('m' == yyC) {
                                  yyIndex = yyIndex + 1;

                                  yyResult = pws(yyIndex);
                                  yyError  = yyResult.select(yyError);
                                  if (yyResult.hasValue()) {

                                    yyC = character(yyResult.index);
                                    if ('{' == yyC) {
                                      yyIndex = yyResult.index + 1;

                                      yyOption1  = yyIndex;

                                      yyResult = pws(yyOption1);
                                      yyError  = 
                                        yyResult.select(yyError, yyOption1);
                                      if (yyResult.hasValue()) {

                                        yyOption1  = yyResult.index;
                                      }

                                      yyRepetition1 = yyOption1;
                                      yyRepeated1   = false;
                                      while (true) {

                                        yyResult = pID(yyRepetition1);
                                        yyError  = yyResult.select(yyError);
                                        if (yyResult.hasValue()) {

                                          yyRepetition1 = yyResult.index;
                                          yyRepeated1   = true;
                                          continue;
                                        }
                                        break;
                                      }

                                      if (yyRepeated1) {

                                        yyOption1  = yyRepetition1;

                                        yyResult = pws(yyOption1);
                                        yyError  = 
                                          yyResult.select(yyError, yyOption1);
                                        if (yyResult.hasValue()) {

                                          yyOption1  = yyResult.index;
                                        }

                                        yyC = character(yyOption1);
                                        if ('}' == yyC) {
                                          yyIndex = yyOption1 + 1;

                                          yyOption1  = yyIndex;

                                          yyResult = pws(yyOption1);
                                          yyError  = 
                                            yyResult.select(yyError, yyOption1);
                                          if (yyResult.hasValue()) {

                                            yyOption1  = yyResult.index;
                                          }

                                          yyC = character(yyOption1);
                                          if (';' == yyC) {
                                            yyIndex = yyOption1 + 1;

                                            yyValue = null;

                                            return new SemanticValue(yyValue, yyIndex, yyError);
                                          }
                                        }
                                      }
                                    }
                                  }
                                } else {
                                  yyError = yyError.select("'from' expected", yyBase);
                                }
                              } else {
                                yyError = yyError.select("'from' expected", yyBase);
                              }
                            } else {
                              yyError = yyError.select("'from' expected", yyBase);
                            }
                          } else {
                            yyError = yyError.select("'from' expected", yyBase);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("functions expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal lexical.ID.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pID(final int yyStart) throws IOException {
    functionsColumn yyColumn = (functionsColumn)column(yyStart);
    if (null == yyColumn.fID) yyColumn.fID = pID$1(yyStart);
    return yyColumn.fID;
  }

  /** Actually parse lexical.ID. */
  private Result pID$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      if (('a' <= yyC) && (yyC <= 'z')) {

        yyResult = pID$$Star1(yyIndex);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyValue = null;

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("ID expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal functions.ID$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pID$$Star1(final int yyStart) throws IOException {
    functionsColumn yyColumn = (functionsColumn)column(yyStart);
    if (null == yyColumn.fID$$Star1) 
      yyColumn.fID$$Star1 = pID$$Star1$1(yyStart);
    return yyColumn.fID$$Star1;
  }

  /** Actually parse functions.ID$$Star1. */
  private Result pID$$Star1$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      if (('a' <= yyC) && (yyC <= 'z')) {

        yyResult = pID$$Star1(yyIndex);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyValue = null;

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyResult = pID$$Star1(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }
        }
        break;

      case '_':
        {
          yyResult = pID$$Star1(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Alternative 3.

    yyValue = null;

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal spacing.ws.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pws(final int yyStart) throws IOException {
    functionsColumn yyColumn = (functionsColumn)column(yyStart);
    if (null == yyColumn.fws) yyColumn.fws = pws$1(yyStart);
    return yyColumn.fws;
  }

  /** Actually parse spacing.ws. */
  private Result pws$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyOption1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case ' ':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\t':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Alternative 2.

    yyOption1  = yyStart;

    yyC = character(yyOption1);
    if ('\r' == yyC) {
      yyIndex = yyOption1 + 1;

      yyOption1  = yyIndex;
    }

    yyC = character(yyOption1);
    if ('\n' == yyC) {
      yyIndex = yyOption1 + 1;

      yyValue = null;

      return new SemanticValue(yyValue, yyIndex, yyError);
    }

    // Alternative 3.

    yyC = character(yyStart);
    if ('\r' == yyC) {
      yyIndex = yyStart + 1;

      yyValue = null;

      return new SemanticValue(yyValue, yyIndex, yyError);
    }

    // Done.
    yyError = yyError.select("ws expected", yyStart);
    return yyError;
  }

}
