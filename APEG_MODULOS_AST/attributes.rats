module attributes;
import types;
import lexical;
import spacing;

/*
optDecls returns[List<VarDeclarationNode> list]:
   decls {$list = $decls.list;}
  |
   {$list = new ArrayList<VarDeclarationNode>();}
;
*/
public List<VarDeclarationNode> optDecls = 

	e:decls  {yyValue = e;}
	/
	{yyValue = new ArrayList<VarDeclarationNode>();}
;


/*
optReturn returns[List<VarDeclarationNode> list]:
   'returns' decls {$list = $decls.list;}
  |
   {$list = new ArrayList<VarDeclarationNode>();}
;
*/
public List<VarDeclarationNode> optReturn = 
	
	"returns" ws e:decls {yyValue = e;}
  	/
	{yyValue = new ArrayList<VarDeclarationNode>();}
;



/*
optLocals returns[List<VarDeclarationNode> list]:
   'locals' decls {$list = $decls.list;}
  |
   {$list = new ArrayList<VarDeclarationNode>();}
;
*/
public List<VarDeclarationNode> optLocals = 

	"locals" ws e:decls {yyValue = e;}
  /
	{yyValue = new ArrayList<VarDeclarationNode>();}
;




/*
decls returns[List<VarDeclarationNode> list]:
  '[' {$list = new ArrayList<VarDeclarationNode>();} 
  v1=varDecl {$list.add($v1.var);} (',' v2=varDecl {$list.add($v2.var);})* ']'
;
*/
public List<VarDeclarationNode> decls = 

	'[' ws? {yyValue = new ArrayList<VarDeclarationNode>();} ws?
	v1:varDecl ws? {yyValue.add(v1);} ws? (',' v2:varDecl ws? {yyValue.add(v2);})* ws? ']'
;



/*
varDecl returns[VarDeclarationNode var]:
  type ID {$var = factory.newVarDeclaration($ID.text, $type.tp);}
;
*/
public VarDeclarationNode varDecl = 
	tp:type ws st:ID ws {yyValue = factory.newVarDeclaration(st, tp);}
;


/*
type returns[TypeNode tp]:
  INT_TYPE {$tp = factory.newIntType();}
 |
  FLOAT_TYPE {$tp = factory.newFloatType();}
 |
  BOOLEAN_TYPE {$tp = factory.newBooleanType();}
 |
  STRING_TYPE {$tp = factory.newStringType();}
 |
  GRAMMAR_TYPE {$tp = factory.newGrammarType();}
 |
  RULE_TYPE {$tp = factory.newRuleType();}
 |
  ID {$tp = factory.newType($ID.text);}
;
*/
public TypeNode type = 
	INT_TYPE ws {yyValue = factory.newIntType();}
 /
	FLOAT_TYPE ws {yyValue = factory.newFloatType();}
 /
	BOOLEAN_TYPE ws {yyValue = factory.newBooleanType();}
 /
	STRING_TYPE ws {yyValue = factory.newStringType();}
 /
	GRAMMAR_TYPE ws {yyValue = factory.newGrammarType();}
 /
	RULE_TYPE ws {yyValue = factory.newRuleType();}
 /
	st1:ID ws {yyValue = factory.newType(st1);}
;
